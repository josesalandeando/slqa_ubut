#!/usr/bin/env bash

dirActual="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source $dirActual/function-template.sh
source $dirActual/utils-print.sh
source $dirActual/utils-test.sh

function prepareGlobalInputForTestCaseFunctionTemplate {

#    All kind of things that are not initialized variables

#    EXAMPLES

#    Create Directory
    createDirectory "$GLOBAL_VAR_ONE"

#    Create File
    createFile "$GLOBAL_VAR_TWO" "./templatePath"

#    .....

}

function prepareSpecificInputForTestCaseFunctionTemplate {

#    All kind of things that are not initialized variables

#    EXAMPLES

#    Create Directory
    createDirectory "$GLOBAL_VAR_ONE"

#    Create File
    createFile "$GLOBAL_VAR_TWO" "./templatePath"

#    .....
}

function cleanScenarioAfterExecuteAllTestsFunctionTemplate {

#    We will destroy all that we have created in prepareSpecificInputForTestCaseFunctionTemplate
    deleteDirectory "$GLOBAL_VAR_ONE"

    deleteDirectory "./templatePath/$GLOBAL_VAR_TWO"

#    .....
}

function printResultTestFunctionTemplate {


#    Print test case results using utils-test.sh functions

#    EXAMPLES

#   Testing if a expression appears in file
    checkAppearsInFile "TEST_CASE_VAR_THREE=$TEST_CASE_VAR_THREE" "./templatePath/$GLOBAL_VAR_TWO" "-F"
    checkIfErrorTestCase "$ERROR_UNIT_TEST_FUNCTION" "$?"
    ERROR_UNIT_TEST_FUNCTION=$?

#   TEST_CASE_VAR_ONE should appear $numTimesTEST_CASE_VAR_ONE times
    checkNumTimesVarInFile "TEST_CASE_VAR_ONE" "$TEST_CASE_VAR_ONE" "./templatePath/$GLOBAL_VAR_TWO" "$GLOBAL_VAR_TWO" "$numTimesTEST_CASE_VAR_ONE"
#   Behind every test check if exist error
    checkIfErrorTestCase "$ERROR_UNIT_TEST_FUNCTION" "$?"
    ERROR_UNIT_TEST_FUNCTION=$?

#   Testing if file generated
    checkIfExistsFile "./templatePath/" "${GLOBAL_VAR_ONE}"
    checkIfErrorTestCase "$ERROR_UNIT_TEST_FUNCTION" "$?"
    ERROR_UNIT_TEST_FUNCTION=$?

#   Testing if function result (var RESULT) is equal to result expected
#   Moreover we can say if we expect error and print a message
    checkIfResultExpected "$RESULT" "$RESULT_EXPECTED" "N" "$MESSAGE"
    checkIfErrorTestCase "$ERROR_UNIT_TEST_FUNCTION" "$?"
    ERROR_UNIT_TEST_FUNCTION=$?

#   Testing if exist directory
    checkIfExistsDirectory "./templatePath" "Y"
    checkIfErrorTestCase "$ERROR_UNIT_TEST_FUNCTION" "$?"
    ERROR_UNIT_TEST_FUNCTION=$?

#   Testing if a list of variables has certains values
    local listVar=("TEST_CASE_VAR_ONE" "TEST_CASE_VAR_TWO")
    local valsToCompare=("$TEST_CASE_VAR_THREE" "$GLOBAL_VAR_TWO")
    checkAreVariablesEquals "${listVar[@]}" "${valsToCompare[@]}"
    checkIfErrorTestCase "$ERROR_UNIT_TEST_FUNCTION" "$?"
    ERROR_UNIT_TEST_FUNCTION=$?

#   Testing if a file has certains credentials
    checkIfFileHasCredentials "./templatePath/$GLOBAL_VAR_TWO" "400"
    checkIfErrorTestCase "$ERROR_UNIT_TEST_FUNCTION" "$?"
    ERROR_UNIT_TEST_FUNCTION=$?


#   Testing if a list of values are in the file numtimes times
    local values=("${TEST_CASE_VAR_TWO}" "${TEST_CASE_VAR_THREE}")
    checkIfListValIsInFile "${values[*]}" "5" "./templatePath/$GLOBAL_VAR_TWO"
    checkIfErrorTestCase "$ERROR_UNIT_TEST_FUNCTION" "$?"
    ERROR_UNIT_TEST_FUNCTION=$?

#   Testing if variable is in the ENV with value
    checkIfVarInEnvWithValue "TEST_CASE_VAR_THREE" "template"
    checkIfErrorTestCase "$ERROR_UNIT_TEST_FUNCTION" "$?"
    ERROR_UNIT_TEST_FUNCTION=$?

}

function runTestFunctionTemplate {

#   *************** FUNCTION SPECIFIC INPUT **********************
    prepareSpecificInputForTestCaseFunctionTemplate

#   *************** PRINTS INPUT AND HEADER TEST **********************
    printHeaderTestCaseAndCallFunction "$numTestCase" "$FUNCTION_NAME" "${INPUT_VARIABLES_FUNCTION[@]}"

#   *************** EXECUTE FUNCTION **********************
    functionTemplate "$GLOBAL_VAR_ONE" "$GLOBAL_VAR_TWO" "$TEST_CASE_VAR_ONE" "$TEST_CASE_VAR_TWO" "$TEST_CASE_VAR_THREE"

#   *************** PRINTS RESULT TEST **********************
    printFooterCallFunction "$FUNCTION_NAME"
    printResultTestFunctionTemplate
    printFooterResultTestCase "$FUNCTION_NAME"

#   *************** INCREMENTS NUM TEST CASE **********************
    numTestCase=$(($numTestCase+1))

}

ERROR_UNIT_TEST_FUNCTION=0
FUNCTION_NAME="templateFunction"
#   *************** FUNCTION INPUT GLOBAL FOR ALL TEST **********************
GLOBAL_VAR_ONE="global variable one"
GLOBAL_VAR_TWO="global variable two"
#   *************** FUNCTION INPUT FOR EVERY TEST CASE **********************
TEST_CASE_VAR_ONE=""
TEST_CASE_VAR_TWO=""
TEST_CASE_VAR_THREE=""
INPUT_VARIABLES_FUNCTION=("GLOBAL_VAR_ONE" "GLOBAL_VAR_TWO" "TEST_CASE_VAR_ONE" "TEST_CASE_VAR_TWO" "TEST_CASE_VAR_THREE")
#   *************** VARS NEEDED FOR PRINT RESULTS **********************
numTimesTEST_CASE_VAR_ONE="0"
#   *************** TEST CASE COUNT **********************
let numTestCase=1

function testFunctionTemplate {

#   *************** Print header of the function **********************
    printHeaderFunctionTest "$FUNCTION_NAME"
#   *************** FUNCTION SPECIFIC GLOBAL INPUT **********************
    prepareGlobalInputForTestCaseFunctionTemplate


#    TEST CASE 1

#   *************** FUNCTION INPUT **********************
    TEST_CASE_VAR_ONE="value_test_case_1_1"
    TEST_CASE_VAR_TWO="value_test_case_1_2"
    TEST_CASE_VAR_THREE="value_test_case_1_3"

#   *************** VARS NEEDED FOR PRINT RESULTS **********************
    numTimesTEST_CASE_VAR_ONE="2"

#   *************** RUN TEST FUNCTION **********************
    runTestFunctionTemplate


#    TEST CASE 2

    TEST_CASE_VAR_ONE="value_test_case_2_1"
    TEST_CASE_VAR_TWO="value_test_case_2_2"
    TEST_CASE_VAR_THREE="value_test_case_2_3"
    numTimesTEST_CASE_VAR_ONE="5"

    runTestFunctionTemplate


#   *************** END TEST CASES **********************

#   *************** CLEAN SPECIFIC INPUTS **********************
    cleanScenarioAfterExecuteAllTestsFunctionTemplate

#   *************** CLEAN SPECIFIC INPUTS **********************
    printFooterFunctionTestCheckingErrors "$FUNCTION_NAME" "$ERROR_UNIT_TEST_FUNCTION"

}

testFunctionTemplate
